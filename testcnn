import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms
from PIL import Image
import numpy as np

# CNN 모델 정의
class SimpleCNN(nn.Module):
    def __init__(self, num_classes=10):  # num_classes는 분류할 클래스의 수에 따라 조정
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.fc1 = nn.Linear(64 * 56 * 56, 512)  # 입력 크기는 모델과 데이터에 따라 조정 필요
        self.fc2 = nn.Linear(512, num_classes)
    
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 56 * 56)  # 이 부분도 모델과 데이터에 따라 조정 필요
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

class_names = ['card']

# 이미지 전처리
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# 이미지 불러오기 및 전처리
image = Image.open("/content/AI/data/test/KakaoTal.jpg").convert("RGB")
image = transform(image)
image = image.unsqueeze(0)  # 배치 차원 추가

# 모델 불러오기
model = SimpleCNN(num_classes=len(class_names))  # class_names는 라벨 목록
model.load_state_dict(torch.load("Z:/VSCODE\AI/new cnn project/saved_models/model.pth"))  # 모델 가중치 불러오기
model.eval()

# 예측
with torch.no_grad():
    outputs = model(image)
    _, predicted = torch.max(outputs.data, 1)
    class_name = class_names[predicted.item()]
    confidence_score = F.softmax(outputs, dim=1)[0][predicted.item()].item()

print("Class:", class_name)
